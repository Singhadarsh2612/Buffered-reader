{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Buffered_reader_frontend/src/components/PDFFlipbook.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\n// Set up the PDF worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\nconst PdfViewer = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const pdfUrl = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.pdfUrl) || \"\"; // Get the PDF URL from location state\n  const [numPages, setNumPages] = useState(null); // Total number of pages\n  const [pageNumber, setPageNumber] = useState(1); // Current page number\n  const navigate = useNavigate();\n\n  // Handle PDF load success\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumPages(numPages);\n    setPageNumber(1); // Reset to the first page when a new PDF is loaded\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(-1),\n      className: \"back-button\",\n      children: \"\\u2B05 Back to Archive\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), pdfUrl && /*#__PURE__*/_jsxDEV(Document, {\n      file: pdfUrl // Use the PDF URL passed via location state\n      ,\n      onLoadSuccess: onDocumentLoadSuccess,\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        pageNumber: pageNumber,\n        width: 800\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPageNumber(prev => Math.max(prev - 1, 1)),\n        disabled: pageNumber === 1,\n        children: \"\\u2B05 Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPageNumber(prev => Math.min(prev + 1, numPages)),\n        disabled: pageNumber === numPages,\n        children: \"Next \\u27A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"page-indicator\",\n      children: [\"Page \", pageNumber, \" of \", numPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfViewer, \"yOs2N6L9ULTvmemeuOV6iXIoCuk=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = PdfViewer;\nexport default PdfViewer;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"names":["React","useState","Document","Page","pdfjs","useLocation","useNavigate","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","PdfViewer","_s","_location$state","location","pdfUrl","state","numPages","setNumPages","pageNumber","setPageNumber","navigate","onDocumentLoadSuccess","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","file","onLoadSuccess","width","prev","Math","max","disabled","min","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Buffered_reader_frontend/src/components/PDFFlipbook.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\n// Set up the PDF worker\npdfjs.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\nconst PdfViewer = () => {\n  const location = useLocation();\n  const pdfUrl = location.state?.pdfUrl || \"\"; // Get the PDF URL from location state\n  const [numPages, setNumPages] = useState(null); // Total number of pages\n  const [pageNumber, setPageNumber] = useState(1); // Current page number\n  const navigate = useNavigate();\n\n  // Handle PDF load success\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumPages(numPages);\n    setPageNumber(1); // Reset to the first page when a new PDF is loaded\n  };\n\n  return (\n    <div className=\"pdf-viewer\">\n      {/* Back Button */}\n      <button onClick={() => navigate(-1)} className=\"back-button\">\n        ⬅ Back to Archive\n      </button>\n\n      {/* PDF Document */}\n      {pdfUrl && (\n        <Document\n          file={pdfUrl} // Use the PDF URL passed via location state\n          onLoadSuccess={onDocumentLoadSuccess}\n        >\n          <Page pageNumber={pageNumber} width={800} />\n        </Document>\n      )}\n\n      {/* Navigation Buttons */}\n      <div className=\"navigation-buttons\">\n        <button\n          onClick={() => setPageNumber((prev) => Math.max(prev - 1, 1))}\n          disabled={pageNumber === 1}\n        >\n          ⬅ Previous\n        </button>\n        <button\n          onClick={() => setPageNumber((prev) => Math.min(prev + 1, numPages))}\n          disabled={pageNumber === numPages}\n        >\n          Next ➡\n        </button>\n      </div>\n\n      {/* Page Indicator */}\n      <p className=\"page-indicator\">\n        Page {pageNumber} of {numPages}\n      </p>\n    </div>\n  );\n};\n\nexport default PdfViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}