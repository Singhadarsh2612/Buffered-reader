{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Buffered_reader_frontend/src/components/PDFFlipbook.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\n\n// Set up the PDF worker\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your actual API key\n\nconst PdfViewer = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const fileId = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.pdfUrl) || \"\"; // Get the file ID from location state\n  const [pdfBlobUrl, setPdfBlobUrl] = useState(null); // Blob URL for the PDF\n  const [numPages, setNumPages] = useState(null); // Total number of pages\n  const [pageNumber, setPageNumber] = useState(1); // Current page number\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    if (!fileId) {\n      setError(\"No file ID provided.\");\n      return;\n    }\n\n    // Fetch the PDF file using the Google Drive API\n    const fetchPdf = async () => {\n      try {\n        // Fetch the file content using the API key\n        const response = await axios.get(`https://www.googleapis.com/drive/v3/files/${fileId}?alt=media&key=${API_KEY}`, {\n          responseType: \"arraybuffer\"\n        });\n\n        // Convert the file content to a Blob URL\n        const blob = new Blob([response.data], {\n          type: \"application/pdf\"\n        });\n        const blobUrl = URL.createObjectURL(blob);\n        setPdfBlobUrl(blobUrl);\n      } catch (err) {\n        console.error(\"Error fetching PDF:\", err);\n        setError(\"Failed to fetch the PDF. Please check the file ID and try again.\");\n      }\n    };\n    fetchPdf();\n  }, [fileId]);\n\n  // Handle PDF load success\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumPages(numPages);\n    setPageNumber(1); // Reset to the first page when a new PDF is loaded\n  };\n\n  // Handle errors when loading the PDF\n  const onDocumentLoadError = error => {\n    console.error(\"Error loading PDF:\", error);\n    setError(\"Failed to load the PDF. Please check the URL and try again.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-viewer\",\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setPageNumber(prev => Math.max(prev - 1, 1)),\n          disabled: pageNumber === 1,\n          children: \"\\u2B05 Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setPageNumber(prev => Math.min(prev + 1, numPages)),\n          disabled: pageNumber === numPages,\n          children: \"Next \\u27A1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), pdfBlobUrl && /*#__PURE__*/_jsxDEV(Document, {\n        file: pdfBlobUrl // Use the Blob URL\n        ,\n        onLoadSuccess: onDocumentLoadSuccess,\n        onLoadError: onDocumentLoadError,\n        children: /*#__PURE__*/_jsxDEV(Page, {\n          pageNumber: pageNumber,\n          width: 600\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Page \", pageNumber, \" of \", numPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfViewer, \"wkh9KYhcaXJ2CQki9n/aAJQe6Mo=\", false, function () {\n  return [useLocation];\n});\n_c = PdfViewer;\nexport default PdfViewer;\nvar _c;\n$RefreshReg$(_c, \"PdfViewer\");","map":{"version":3,"names":["React","useState","useEffect","Document","Page","pdfjs","useLocation","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","API_KEY","PdfViewer","_s","_location$state","location","fileId","state","pdfUrl","pdfBlobUrl","setPdfBlobUrl","numPages","setNumPages","pageNumber","setPageNumber","error","setError","fetchPdf","response","get","responseType","blob","Blob","data","type","blobUrl","URL","createObjectURL","err","console","onDocumentLoadSuccess","onDocumentLoadError","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","prev","Math","max","disabled","min","file","onLoadSuccess","onLoadError","width","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Buffered_reader_frontend/src/components/PDFFlipbook.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\n\n// Set up the PDF worker\npdfjs.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your actual API key\n\nconst PdfViewer = () => {\n  const location = useLocation();\n  const fileId = location.state?.pdfUrl || \"\"; // Get the file ID from location state\n  const [pdfBlobUrl, setPdfBlobUrl] = useState(null); // Blob URL for the PDF\n  const [numPages, setNumPages] = useState(null); // Total number of pages\n  const [pageNumber, setPageNumber] = useState(1); // Current page number\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    if (!fileId) {\n      setError(\"No file ID provided.\");\n      return;\n    }\n\n    // Fetch the PDF file using the Google Drive API\n    const fetchPdf = async () => {\n      try {\n        // Fetch the file content using the API key\n        const response = await axios.get(\n          `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media&key=${API_KEY}`,\n          { responseType: \"arraybuffer\" }\n        );\n\n        // Convert the file content to a Blob URL\n        const blob = new Blob([response.data], { type: \"application/pdf\" });\n        const blobUrl = URL.createObjectURL(blob);\n        setPdfBlobUrl(blobUrl);\n      } catch (err) {\n        console.error(\"Error fetching PDF:\", err);\n        setError(\"Failed to fetch the PDF. Please check the file ID and try again.\");\n      }\n    };\n\n    fetchPdf();\n  }, [fileId]);\n\n  // Handle PDF load success\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumPages(numPages);\n    setPageNumber(1); // Reset to the first page when a new PDF is loaded\n  };\n\n  // Handle errors when loading the PDF\n  const onDocumentLoadError = (error) => {\n    console.error(\"Error loading PDF:\", error);\n    setError(\"Failed to load the PDF. Please check the URL and try again.\");\n  };\n\n  return (\n    <div className=\"pdf-viewer\">\n      {error ? (\n        <p style={{ color: \"red\" }}>{error}</p>\n      ) : (\n        <>\n          {/* Navigation Buttons */}\n          <div className=\"navigation-buttons\">\n            <button\n              onClick={() => setPageNumber((prev) => Math.max(prev - 1, 1))}\n              disabled={pageNumber === 1}\n            >\n              ⬅ Previous\n            </button>\n            <button\n              onClick={() => setPageNumber((prev) => Math.min(prev + 1, numPages))}\n              disabled={pageNumber === numPages}\n            >\n              Next ➡\n            </button>\n          </div>\n\n          {/* PDF Document */}\n          {pdfBlobUrl && (\n            <Document\n              file={pdfBlobUrl} // Use the Blob URL\n              onLoadSuccess={onDocumentLoadSuccess}\n              onLoadError={onDocumentLoadError}\n            >\n              <Page pageNumber={pageNumber} width={600} />\n            </Document>\n          )}\n\n          {/* Page Indicator */}\n          <p>\n            Page {pageNumber} of {numPages}\n          </p>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default PdfViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}